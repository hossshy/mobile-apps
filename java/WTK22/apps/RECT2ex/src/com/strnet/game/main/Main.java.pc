/*
 * Last modified: 2010/05/03 02:43:49
 * @author Kazamai, Kou
 */
package com.strnet.game.main;

import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.ByteArrayOutputStream;
import com.strnet.game.common.IOUtil;

import java.awt.*;
import java.awt.image.*;
import java.awt.event.* ;
import javax.swing.* ;
import javax.imageio.ImageIO;

public class Main
{
	MainCanvas c = null;

	public Main()
	{
		c = new MainCanvas(this);
		JFrame frame = new JFrame();
		frame.addWindowListener(new WindowAdapter() { 
			public void windowClosing(WindowEvent e) { System.exit(0); }
		});
		frame.getContentPane().add(c);
		frame.setSize(320, 320);
		frame.setVisible(true);
		frame.addKeyListener(c);
		
		c.loadTitle();
		(new Thread(c)).start();
		c.init();
	}
	
	public static void main(String[] args)
	{
		new Main();
	}
		
	public static boolean isDxMode()
	{
		return false;
	}

	protected void startApp() {}
	protected void pauseApp() {}
	
	protected void destroyApp(boolean flag)
	{
		if ( c != null )
		{
			c.terminate();
		}
	}
}


abstract class ModelDependenceCanvas extends JPanel implements Runnable, KeyListener
{
	public static final String URL = "http://m.strnet.com/au/";
	
	public static final int SCREEN_WIDTH = 240;
	public static final int SCREEN_HEIGHT = 240;
	
	public static final int S_KEY_FIRE = 1;
	public static final int S_KEY_UP = 2;
	public static final int S_KEY_DOWN = 3;
	public static final int S_KEY_LEFT = 4;
	public static final int S_KEY_RIGHT = 5;
	public static final int S_KEY_0 = 6;
	public static final int S_KEY_1 = 7;
	public static final int S_KEY_2 = 8;
	public static final int S_KEY_3 = 9;
	public static final int S_KEY_4 = 10;
	public static final int S_KEY_5 = 11;
	public static final int S_KEY_6 = 12;
	public static final int S_KEY_7 = 13;
	public static final int S_KEY_8 = 14;
	public static final int S_KEY_9 = 15;
	public static final int S_KEY_POUND = 16;
	public static final int S_KEY_STAR = 17;
	public static final int S_SOFT_KEY = 18;
	
	public static final int S_FONT_SMALL = 0;
	public static final int S_FONT_MEDIUM = 1;
	public static final int S_FONT_LARGE = 2;
	
	public static final boolean DX = false;
	public static final int MAX_VOLUME = 100;
	
	int screenX = 0;
	int screenY = 0;
	Image[] image = null;
	Image title = null;
	String[] labels;
	Graphics g = null;
	boolean[] keyState = new boolean[] {false,false,false,false,false,false,false,false,false,false,false,false,false,false};
	int keyEvent = -1;
	Main app;
	public int fontWidth;
	public int wideFontWidth;
	public int fontHeight;
	public int wordSpace;
	boolean initFlag = false;
	int loadedCounter = 0;
	int volume = MAX_VOLUME;
	int seVolume = MAX_VOLUME;
	boolean bgmEnable = true;
	boolean seEnable = true;
	boolean vibrateEnable = true;
	boolean hiSound = true;
	BufferedImage offscreen;
	int[] command = new int[2];
	int ascent = 0;
	private Font font;
	
	public ModelDependenceCanvas(Main app)
	{
		super(false);
		this.app = app;
	}

	void init(String[] labels)
	{
		offscreen = new BufferedImage(SCREEN_WIDTH,SCREEN_HEIGHT,BufferedImage.TYPE_INT_RGB);
		if ( !initFlag )
		{
			this.labels = labels;
			g = offscreen.getGraphics();
			
			initFlag = true;
		}
	}

	void initImage(int max)
	{
		image = new Image[max+1];
	}
	
	public void loadImage(int i) throws Exception
	{
		if ( image[i] == null )
		{
			image[i] = ImageIO.read(new File("res/" + i + ".png"));
		}
	}
	
	public void loadTitle()
	{
		try
		{
			title = ImageIO.read(new File("res/str.png"));
		} catch ( Exception e ) {}
	}
	
	public void releaseImage(int i) throws Exception
	{
		image[i] = null;
	}

	public boolean isLoadedImage(int i)
	{
		return image[i] != null;
	}

	void removeCommands()
	{
	}
	
	void addCommand(int key, int i)
	{
		command[key] = i;
	}
	
	public void commandAction(int key)
	{
		doCommandAction(key);
		keyEvent = S_SOFT_KEY;
		fireKeyPressed();
	}

	public void setKeyState() {}
	
	abstract void doCommandAction(int i);
		
	public void keyTyped(KeyEvent e){}

	public void keyPressed(KeyEvent e)
	{
		int keyCode = e.getKeyCode();
		
		switch ( keyCode )
		{
		case KeyEvent.VK_X:
			commandAction(command[0]);
			break;
		case KeyEvent.VK_C:
			commandAction(command[1]);
			break;
		case KeyEvent.VK_ESCAPE:
			System.exit(0);
			break;
		case KeyEvent.VK_ENTER:
			keyEvent = S_KEY_FIRE;
			break;

		case KeyEvent.VK_ASTERISK:
			keyEvent = S_KEY_STAR;
			break;
		case KeyEvent.VK_NUMBER_SIGN:
			keyEvent = S_KEY_POUND;
			break;
			
		case KeyEvent.VK_W:
		case KeyEvent.VK_UP:
			keyEvent = S_KEY_UP;
			keyState[0] = true;
			break;
		case KeyEvent.VK_Z:
		case KeyEvent.VK_DOWN:
			keyEvent = S_KEY_DOWN;
			keyState[1] = true;
			break;
		case KeyEvent.VK_A:
		case KeyEvent.VK_LEFT:
			keyEvent = S_KEY_LEFT;
			keyState[2] = true;
			break;
		case KeyEvent.VK_S:
		case KeyEvent.VK_RIGHT:
			keyEvent = S_KEY_RIGHT;
			keyState[3] = true;
			break;
		}
		fireKeyPressed();
	}
	

	public void keyReleased(KeyEvent e)
	{
		int keyCode = e.getKeyCode();
		switch ( keyCode )
		{
		case KeyEvent.VK_W:
		case KeyEvent.VK_UP:
			keyState[0] = false;
			break;
		case KeyEvent.VK_Z:
		case KeyEvent.VK_DOWN:
			keyState[1] = false;
			break;
		case KeyEvent.VK_A:
		case KeyEvent.VK_LEFT:
			keyState[2] = false;
			break;
		case KeyEvent.VK_S:
		case KeyEvent.VK_RIGHT:
			keyState[3] = false;
			break;
		}
		fireKeyReleased();
	}	

	public void fireKeyPressed() {}
	public void fireKeyReleased() {}
	
	public void browser(String url)
	{
	}
	
	public void lock()
	{
	}
	
	public void unlock()
	{
		repaint();
	}

	public void paintComponent(Graphics g)
	{
		g.drawImage(offscreen, 0, 0, null);
	}


	public void fillRect(int x, int y, int w, int h)
	{
		g.fillRect(screenX + x, screenY + y, w, h);
	}

	public void fillAll()
	{
		g.fillRect(0, 0, getWidth(), getHeight());
	}

	public void drawImage(int imageNo, int x, int y)
	{
		if ( image[imageNo] == null )
		{
			try{
			loadImage(imageNo);
			}catch(Exception e){}
		}
		g.drawImage(image[imageNo], screenX + x, screenY + y, null);
	}

	public void drawTitle(int x, int y)
	{
		if ( title != null )
		{
			g.drawImage(title, screenX + x, screenY + y, null);
		}
	}
	
	public void drawTitle(int sx, int sy, int dx, int dy, int w, int h)
	{
		g.drawImage(title, screenX + dx, screenY + dy,
					 screenX + dx + w, screenY + dy + h,
					sx, sy, (sx+w), (sy+h), null);
	}

	public void drawImage(int imageNo, int sx, int sy, int dx, int dy, int w, int h)
	{
		if ( image[imageNo] == null )
		{
			try{
			loadImage(imageNo);
			}catch(Exception e){}
		}
		g.drawImage(image[imageNo], screenX + dx, screenY + dy,
					 screenX + dx + w, screenY + dy + h,
					sx, sy, (sx+w), (sy+h), null);
	}
	
	public void drawString(String msg, int x, int y)
	{
		g.drawString(msg, screenX + x, screenY + y+8);
	}
	
	public void drawRect(int x, int y, int w, int h)
	{
		g.drawRect(screenX + x, screenY + y, w, h);
	}
	
	public void setColor(int r, int gg, int b)
	{
		g.setColor(new Color(r,gg,b));
	}
	
	public void setFont(int size)
	{
		font = getFont();
		fontWidth = 8;
		wideFontWidth = 16;
		fontHeight = 6;
		wordSpace = 2;
	}
	public int getStringWidth(String s)
	{
		return s.length() * wideFontWidth;
	}
	
	public void terminate()
	{
		System.exit(0);
	}
	
	public static boolean isRecord(String key)
	{
		File f = new File("./." + key + ".save");
		return f.exists();
	}

	public static String load(String key) throws Exception
	{
		InputStream in = null;
		ByteArrayOutputStream out = null;
		try
		{
			in = new FileInputStream("./." + key + ".save");
			out = new ByteArrayOutputStream();

			byte[] buf = new byte[64];
			int len;
			while ( (len = in.read(buf)) != -1 )
			{
				out.write(buf, 0, len);
			}
			out.flush();
			in.close();
			return new String(out.toByteArray(), "Shift_JIS");
		}
		finally
		{
			IOUtil.close(in);
			IOUtil.close(out);
		}
	}
	
	public static void delete(String key) throws Exception
	{
	}
	
	public static void save(String key, String value) throws Exception
	{
		BufferedWriter out = null;
		try
		{
			File f = new File("./." + key + ".save");
			out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "Shift_JIS"));
			out.write(value);
			out.flush();
		}
		finally
		{
			if ( out != null )
			{
				try{out.close();
				}catch(Exception ignore){}
			}
		}
	}

	public void loadBGM(int id) throws Exception
	{
	}
	
	public void startBGM(int id, int mediaTime) throws Exception
	{
	}
	
	public void stopBGM() throws Exception
	{
	}

	public void loadSE(int id) throws Exception
	{
	}
	
	public void startSE() throws Exception
	{
	}
	
	
	public void pauseBGM() throws Exception
	{
	}
	
	public void restartBGM() throws Exception
	{
	}

	public void stopSE() throws Exception
	{
	}
	
	public void setBGMVolume(int volume)
	{
		this.volume = volume;
	}
	
	public void setSEVolume(int seVolume)
	{
		this.seVolume = seVolume;
	}
	
	public void vibrate(int ms)
	{
	}

	public String getCarrier()
	{
		return "au";
	}
	
	public String readTextFile(String fileName) throws Exception
	{
		InputStream in = null;
		ByteArrayOutputStream out = null;
		try
		{
			in = new FileInputStream("res/" + fileName);
			out = new ByteArrayOutputStream();

			byte[] buf = new byte[64];
			int len;
			while ( (len = in.read(buf)) != -1 )
			{
				out.write(buf, 0, len);
			}
			out.flush();
			in.close();
			return new String(out.toByteArray(), "Shift_JIS");
		}
		finally
		{
			IOUtil.close(in);
			IOUtil.close(out);
		}
	}
	
	public void updateTileImage(int id, int width, int height, int sw, int sh)
	{
		if ( image[id] == null )
		{
			return;
		}

		Image im = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
		Graphics tmpG = im.getGraphics();
		int x = 0;
		int y = 0;
		while ( x < width || y <= height )
		{
			tmpG.drawImage(image[id], x,y, x +sw, y+sh,0, 0, sw, sh, null);
			if ( (x + sw) >= width )
			{
				x = 0;
				y += sh;
			}
			else
			{
				x += sw;
			}
		}
		image[id] = im;
	}

	public abstract int getBGMSplit(int id);
}
